/**
 */
package de.dc.fx.ui.renderer.model.provider;

import de.dc.fx.ui.renderer.model.util.UIAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UIItemProviderAdapterFactory extends UIAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UIItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXRootItemProvider fxRootItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXRootAdapter() {
		if (fxRootItemProvider == null) {
			fxRootItemProvider = new FXRootItemProvider(this);
		}

		return fxRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXEventItemProvider fxEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXEventAdapter() {
		if (fxEventItemProvider == null) {
			fxEventItemProvider = new FXEventItemProvider(this);
		}

		return fxEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXMargin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXMarginItemProvider fxMarginItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXMargin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXMarginAdapter() {
		if (fxMarginItemProvider == null) {
			fxMarginItemProvider = new FXMarginItemProvider(this);
		}

		return fxMarginItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXPadding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXPaddingItemProvider fxPaddingItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXPadding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXPaddingAdapter() {
		if (fxPaddingItemProvider == null) {
			fxPaddingItemProvider = new FXPaddingItemProvider(this);
		}

		return fxPaddingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXHBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXHBoxItemProvider fxhBoxItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXHBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXHBoxAdapter() {
		if (fxhBoxItemProvider == null) {
			fxhBoxItemProvider = new FXHBoxItemProvider(this);
		}

		return fxhBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXVBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXVBoxItemProvider fxvBoxItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXVBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXVBoxAdapter() {
		if (fxvBoxItemProvider == null) {
			fxvBoxItemProvider = new FXVBoxItemProvider(this);
		}

		return fxvBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXBorderPane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXBorderPaneItemProvider fxBorderPaneItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXBorderPane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXBorderPaneAdapter() {
		if (fxBorderPaneItemProvider == null) {
			fxBorderPaneItemProvider = new FXBorderPaneItemProvider(this);
		}

		return fxBorderPaneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXButtonItemProvider fxButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXButtonAdapter() {
		if (fxButtonItemProvider == null) {
			fxButtonItemProvider = new FXButtonItemProvider(this);
		}

		return fxButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXLabelItemProvider fxLabelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXLabelAdapter() {
		if (fxLabelItemProvider == null) {
			fxLabelItemProvider = new FXLabelItemProvider(this);
		}

		return fxLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXCheckButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXCheckButtonItemProvider fxCheckButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXCheckButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXCheckButtonAdapter() {
		if (fxCheckButtonItemProvider == null) {
			fxCheckButtonItemProvider = new FXCheckButtonItemProvider(this);
		}

		return fxCheckButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXRadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXRadioButtonItemProvider fxRadioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXRadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXRadioButtonAdapter() {
		if (fxRadioButtonItemProvider == null) {
			fxRadioButtonItemProvider = new FXRadioButtonItemProvider(this);
		}

		return fxRadioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXListView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXListViewItemProvider fxListViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXListView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXListViewAdapter() {
		if (fxListViewItemProvider == null) {
			fxListViewItemProvider = new FXListViewItemProvider(this);
		}

		return fxListViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXTableView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXTableViewItemProvider fxTableViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXTableView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXTableViewAdapter() {
		if (fxTableViewItemProvider == null) {
			fxTableViewItemProvider = new FXTableViewItemProvider(this);
		}

		return fxTableViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXFilteredTableView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXFilteredTableViewItemProvider fxFilteredTableViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXFilteredTableView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXFilteredTableViewAdapter() {
		if (fxFilteredTableViewItemProvider == null) {
			fxFilteredTableViewItemProvider = new FXFilteredTableViewItemProvider(this);
		}

		return fxFilteredTableViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXSortFilteredTableView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXSortFilteredTableViewItemProvider fxSortFilteredTableViewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXSortFilteredTableView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXSortFilteredTableViewAdapter() {
		if (fxSortFilteredTableViewItemProvider == null) {
			fxSortFilteredTableViewItemProvider = new FXSortFilteredTableViewItemProvider(this);
		}

		return fxSortFilteredTableViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.fx.ui.renderer.model.FXTableColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FXTableColumnItemProvider fxTableColumnItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.fx.ui.renderer.model.FXTableColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFXTableColumnAdapter() {
		if (fxTableColumnItemProvider == null) {
			fxTableColumnItemProvider = new FXTableColumnItemProvider(this);
		}

		return fxTableColumnItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (fxRootItemProvider != null)
			fxRootItemProvider.dispose();
		if (fxEventItemProvider != null)
			fxEventItemProvider.dispose();
		if (fxMarginItemProvider != null)
			fxMarginItemProvider.dispose();
		if (fxPaddingItemProvider != null)
			fxPaddingItemProvider.dispose();
		if (fxhBoxItemProvider != null)
			fxhBoxItemProvider.dispose();
		if (fxvBoxItemProvider != null)
			fxvBoxItemProvider.dispose();
		if (fxBorderPaneItemProvider != null)
			fxBorderPaneItemProvider.dispose();
		if (fxButtonItemProvider != null)
			fxButtonItemProvider.dispose();
		if (fxLabelItemProvider != null)
			fxLabelItemProvider.dispose();
		if (fxCheckButtonItemProvider != null)
			fxCheckButtonItemProvider.dispose();
		if (fxRadioButtonItemProvider != null)
			fxRadioButtonItemProvider.dispose();
		if (fxListViewItemProvider != null)
			fxListViewItemProvider.dispose();
		if (fxTableViewItemProvider != null)
			fxTableViewItemProvider.dispose();
		if (fxFilteredTableViewItemProvider != null)
			fxFilteredTableViewItemProvider.dispose();
		if (fxSortFilteredTableViewItemProvider != null)
			fxSortFilteredTableViewItemProvider.dispose();
		if (fxTableColumnItemProvider != null)
			fxTableColumnItemProvider.dispose();
	}

}
